package de.atlassoft.io.docexport;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Section;

import de.atlassoft.model.ScheduleScheme;

//TODO: implementieren, Konstruktor fehlt noch.
/**
 * Is used to generate a PDF document.
 * 
 * @author Andreas Szlatki & Linus Neßler
 * 
 */
class PDFCreator {

	/**
	 * One of the Fonts used in the PDF document.
	 */
	private Font smallFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.NORMAL);

	/**
	 * One of the Fonts used in the PDF document.
	 */
	private Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.BOLD);

	/**
	 * Generates empty lines in an specific paragraph. If paragraph is null, an
	 * {@link IllegalArgumentException} is thrown.
	 * 
	 * @param paragraph
	 *            {@link Paragraph} which gets edited.
	 * @param number
	 *            The number of empty lines which should be added.
	 * 
	 */
	protected void addEmptyLine(Paragraph paragraph, int number) {
		if (paragraph == null) {
			throw new IllegalArgumentException("paragraph must not be null");
		}
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	/**
	 * Generates Meta data to a PDF document.Accessiable in documents
	 * property's. If document is null, an {@link IllegalArgumentException} is
	 * thrown.
	 * 
	 * @param document
	 *            {@link Document} to which the Metadata should be added.
	 * 
	 */
	protected void addMetaData(Document document, String title) {
		if (document == null) {
			throw new IllegalArgumentException("document must not be null");
		}
		document.addTitle(title);
		document.addSubject("Using iText");
		document.addKeywords("Java, PDF, iText");
		document.addAuthor("ATLASsoft");
		document.addCreator("ATLASsoft");
	}

	/**
	 * Generates a title page for a PDF document. If document is null, an
	 * {@link IllegalArgumentException} is thrown. If the insertion to the
	 * document fails an {@link DocumentException} is thrown.
	 * 
	 * @param document
	 *            {@link Document} which gets edited.
	 * @param title
	 *            The name of the title.
	 * @param description
	 *            The description to the title page.
	 * @throws DocumentException
	 * 
	 */
	protected void addTitlePage(Document document, String title,
			String descrption) throws DocumentException {
		if (document == null) {
			throw new IllegalArgumentException("document must not be null");
		}
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph(title, smallBold));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("PDF generated by: "
				+ System.getProperty("user.name") + ", " + new Date(),
				smallBold));
		addEmptyLine(preface, 3);
		preface.add(new Paragraph(
				"This document describes something which is very important ",
				smallBold));

		addEmptyLine(preface, 8);

		document.add(preface);
		// Start a new page
		document.newPage();
	}

	protected String getWeekDay(int dayOfWeek) {
		String res = null;
		switch (dayOfWeek) {
		case 1:
			res = "Montag";
			break;
		case 2:
			res = "Dienstag";
			break;
		case 3:
			res = "Mittwoch";
			break;
		case 4:
			res = "Donnerstag";
			break;
		case 5:
			res = "Freitag";
			break;
		case 6:
			res = "Samstag";
			break;
		case 7:
			res = "Sonntag";
			break;
		default:
			res = "Invalid Day";
			break;
		}

		return res;
	}

	/**
	 * Adds content to the document. If document is null, an
	 * {@link IllegalArgumentException} is thrown. If the insertion to the
	 * document fails an {@link DocumentException} is thrown.
	 * 
	 * @param document
	 *            {@link Document} which gets edited.
	 * @param data
	 *            The actual content which should be added.
	 * @throws DocumentException
	 * 
	 */
	protected void addScheduleContent(Document document, ScheduleScheme schedule)
			throws DocumentException {
		if (document == null) {
			throw new IllegalArgumentException("document must not be null");
		}

		Paragraph scheduleName = new Paragraph("Fahrplanname: "
				+ schedule.getID());
		Paragraph scheduleType = new Paragraph("Fahrplantyp: "
				+ schedule.getScheduleType());
		Paragraph firstDay = new Paragraph("Erster Fahrtag : "
				+ getWeekDay(schedule.getFirstRide().DAY_OF_WEEK) + ",der "
				+ schedule.getFirstRide().DAY_OF_MONTH + "."
				+ schedule.getFirstRide().MONTH + "."
				+ schedule.getFirstRide().YEAR + ";"
				+ schedule.getFirstRide().HOUR_OF_DAY + ":"
				+ schedule.getFirstRide().MINUTE);
		Paragraph lastDay = new Paragraph("Letzter Fahrtag : "
				+ schedule.getLastRide());
		List<String> drivingDaysArray = new ArrayList<String>();
		for (int i : schedule.getDays()) {
			drivingDaysArray.add(getWeekDay(i));
		}
		Paragraph drivingDays = new Paragraph("Fährt an den Tagen : "
				+ drivingDaysArray);
		Paragraph intervall = new Paragraph("Intervall : "
				+ schedule.getInterval());
		Paragraph railsys = new Paragraph("Gehört zu Streckennetznummer : "
				+ schedule.getRailSysID());

		document.add(scheduleName);
		document.add(scheduleType);
		document.add(firstDay);
		document.add(lastDay);
		document.add(drivingDays);
		document.add(intervall);
		document.add(railsys);

	}

	/**
	 * Adds content to the document. If document is null, an
	 * {@link IllegalArgumentException} is thrown. If the insertion to the
	 * document fails an {@link DocumentException} is thrown.
	 * 
	 * @param document
	 *            {@link Document} which gets edited.
	 * @param data
	 *            The actual content which should be added.
	 * 
	 */
	protected void addStatisticContent(Document document, Object data,
			ScheduleScheme schedule) {
		if (document == null) {
			throw new IllegalArgumentException("document must not be null");
		}

	}

	/**
	 * Adds content to the document. If document is null, an
	 * {@link IllegalArgumentException} is thrown. If the insertion to the
	 * document fails an {@link DocumentException} is thrown.
	 * 
	 * @param document
	 *            {@link Document} which gets edited.
	 * @param data
	 *            The actual content which should be added.
	 * 
	 */
	protected void addDepartureContent(Document document, Object data,
			ScheduleScheme schedule) {
		if (document == null) {
			throw new IllegalArgumentException("document must not be null");
		}

	}

	/**
	 * Generates a table in the PDF document.If subCatPart is null, an
	 * {@link IllegalArgumentException} is thrown. If an Element gets added
	 * which doesn't fit the tables property's, an {@link BadElementException}
	 * is thrown.
	 * 
	 * @param subCatPart
	 *            {@link Section} describes the structure and the content of the
	 *            table.
	 * 
	 */
	protected void createTabel(Section subCatPart) {
		if (subCatPart == null) {
			throw new IllegalArgumentException("document must not be null");
		}
	}

	/**
	 * Generates a list in the PDF document.If subCatPart is null, an
	 * {@link IllegalArgumentException} is thrown.
	 * 
	 * @param subCatPart
	 *            {@link Section} describes the structure and the content of the
	 *            list.
	 * 
	 */
	protected void createList(Section subCatPart) {
		if (subCatPart == null) {
			throw new IllegalArgumentException("document must not be null");
		}
	}

}
